beta_amp <- c(beta_0, beta_sin)
plot(beta_amp, type='l')
plot(ret$cases)
plot(ret$cases, type='l')
plot(ret$Rnot, type='l')
seasonal_forcing <- 0 #without seasonal forcing
t_start <- 25*365 #starting at year 25
external_forcing <- 1/365
host_lifetime <- c(70 * 365)
infectious_days <- c(28)
observation_days <- c(100) * 365
population_size <- 10^c(4)
process_reps <- 1
times <- seq(1, observation_days)
params <- c(gamma=1 / infectious_days, mu=1 / host_lifetime,
d=1 / host_lifetime, eta=external_forcing / population_size,
beta=0, rho=0.1, S_0=1, I_0=0, R_0=0, N_0=population_size)
#calculating increasing beta
beta_final <- (params["gamma"] + params["d"]) / population_size #end at ~.085
beta_0 <- rep(0,times=t_start) #time interval where beta is not changing
beta_inc <- seq(0, beta_final, length=(observation_days) - t_start) # hinge function describing increasing beta
period <- 365 #period of seasonality
simulation_years <- observation_days / period #100 years
l <- length(beta_inc) / period #number of years
sin_force <- sin(2 * pi * rep(seq(1,period), times=l) / period)
beta_sin <- beta_inc + seasonal_forcing * sin_force
beta_sin[beta_sin<0] <- 0 #can't have negative transmission values
beta_amp <- c(beta_0, beta_sin)
plot(beta_amp, type='l')
cov <- data.frame(gamma_t=rep(0, times=length(times)), mu_t=rep(0, times=length(times)),
d_t=rep(0, times=length(times)), eta_t=rep(0, times=length(times)),
beta_t=beta_amp, time=times)
sim <- spaero::create_simulator(times=times, params=params, covar=cov)
ret <- list()
do_sim <- function(obj, nsim=process_reps){
cols_to_delete <- c("reports", "gamma_t", "mu_t", "d_t", "eta_t")
ret <- pomp::simulate(obj, nsim=nsim, as.data.frame=TRUE)
ret$Rnot <- (ret$beta_t)/(params['gamma'] + ret$gamma_t + params['d'] + ret$d_t)
ret[, !colnames(ret) %in% cols_to_delete]
}
ret <- do_sim(sim)
plot(ret$cases, type='l')
seasonal_forcing <- 0 #without seasonal forcing
t_start <- 25*365 #starting at year 25
external_forcing <- 1/365
host_lifetime <- c(70 * 365)
infectious_days <- c(28)
observation_days <- c(200) * 365
population_size <- 10^c(4)
process_reps <- 1
times <- seq(1, observation_days)
params <- c(gamma=1 / infectious_days, mu=1 / host_lifetime,
d=1 / host_lifetime, eta=external_forcing / population_size,
beta=0, rho=0.1, S_0=1, I_0=0, R_0=0, N_0=population_size)
#calculating increasing beta
beta_final <- (params["gamma"] + params["d"]) / population_size #end at ~.085
beta_0 <- rep(0,times=t_start) #time interval where beta is not changing
beta_inc <- seq(0, beta_final, length=(observation_days) - t_start) # hinge function describing increasing beta
period <- 365 #period of seasonality
simulation_years <- observation_days / period #100 years
l <- length(beta_inc) / period #number of years
sin_force <- sin(2 * pi * rep(seq(1,period), times=l) / period)
beta_sin <- beta_inc + seasonal_forcing * sin_force
beta_sin[beta_sin<0] <- 0 #can't have negative transmission values
beta_amp <- c(beta_0, beta_sin)
plot(beta_amp, type='l')
cov <- data.frame(gamma_t=rep(0, times=length(times)), mu_t=rep(0, times=length(times)),
d_t=rep(0, times=length(times)), eta_t=rep(0, times=length(times)),
beta_t=beta_amp, time=times)
sim <- spaero::create_simulator(times=times, params=params, covar=cov)
ret <- list()
do_sim <- function(obj, nsim=process_reps){
cols_to_delete <- c("reports", "gamma_t", "mu_t", "d_t", "eta_t")
ret <- pomp::simulate(obj, nsim=nsim, as.data.frame=TRUE)
ret$Rnot <- (ret$beta_t)/(params['gamma'] + ret$gamma_t + params['d'] + ret$d_t)
ret[, !colnames(ret) %in% cols_to_delete]
}
ret <- do_sim(sim)
plot(ret$cases, type='l')
seasonal_forcing <- 0 #without seasonal forcing
t_start <- 25*365 #starting at year 25
external_forcing <- 1/365
host_lifetime <- c(70 * 365)
infectious_days <- c(28)
observation_days <- c(200) * 365
population_size <- 10^c(5)
process_reps <- 1
times <- seq(1, observation_days)
params <- c(gamma=1 / infectious_days, mu=1 / host_lifetime,
d=1 / host_lifetime, eta=external_forcing / population_size,
beta=0, rho=0.1, S_0=1, I_0=0, R_0=0, N_0=population_size)
#calculating increasing beta
beta_final <- (params["gamma"] + params["d"]) / population_size #end at ~.085
beta_0 <- rep(0,times=t_start) #time interval where beta is not changing
beta_inc <- seq(0, beta_final, length=(observation_days) - t_start) # hinge function describing increasing beta
period <- 365 #period of seasonality
simulation_years <- observation_days / period #100 years
l <- length(beta_inc) / period #number of years
sin_force <- sin(2 * pi * rep(seq(1,period), times=l) / period)
beta_sin <- beta_inc + seasonal_forcing * sin_force
beta_sin[beta_sin<0] <- 0 #can't have negative transmission values
beta_amp <- c(beta_0, beta_sin)
plot(beta_amp, type='l')
cov <- data.frame(gamma_t=rep(0, times=length(times)), mu_t=rep(0, times=length(times)),
d_t=rep(0, times=length(times)), eta_t=rep(0, times=length(times)),
beta_t=beta_amp, time=times)
sim <- spaero::create_simulator(times=times, params=params, covar=cov)
ret <- list()
do_sim <- function(obj, nsim=process_reps){
cols_to_delete <- c("reports", "gamma_t", "mu_t", "d_t", "eta_t")
ret <- pomp::simulate(obj, nsim=nsim, as.data.frame=TRUE)
ret$Rnot <- (ret$beta_t)/(params['gamma'] + ret$gamma_t + params['d'] + ret$d_t)
ret[, !colnames(ret) %in% cols_to_delete]
}
ret <- do_sim(sim)
plot(ret$cases, type='l')
seasonal_forcing <- 0 #without seasonal forcing
t_start <- 25*365 #starting at year 25
external_forcing <- 1/365
host_lifetime <- c(70 * 365)
infectious_days <- c(28)
observation_days <- c(200) * 365
population_size <- 10^c(5)
process_reps <- 1
times <- seq(1, observation_days)
params <- c(gamma=1 / infectious_days, mu=1 / host_lifetime,
d=1 / host_lifetime, eta=external_forcing / population_size,
beta=0, rho=0.1, S_0=1, I_0=0, R_0=0, N_0=population_size)
#calculating increasing beta
beta_final <- (params["gamma"] + params["d"]) # / population_size #end at ~.085
beta_0 <- rep(0,times=t_start) #time interval where beta is not changing
beta_inc <- seq(0, beta_final, length=(observation_days) - t_start) # hinge function describing increasing beta
period <- 365 #period of seasonality
simulation_years <- observation_days / period #100 years
l <- length(beta_inc) / period #number of years
sin_force <- sin(2 * pi * rep(seq(1,period), times=l) / period)
beta_sin <- beta_inc + seasonal_forcing * sin_force
beta_sin[beta_sin<0] <- 0 #can't have negative transmission values
beta_amp <- c(beta_0, beta_sin)
plot(beta_amp, type='l')
cov <- data.frame(gamma_t=rep(0, times=length(times)), mu_t=rep(0, times=length(times)),
d_t=rep(0, times=length(times)), eta_t=rep(0, times=length(times)),
beta_t=beta_amp, time=times)
sim <- spaero::create_simulator(times=times, params=params, covar=cov)
ret <- list()
do_sim <- function(obj, nsim=process_reps){
cols_to_delete <- c("reports", "gamma_t", "mu_t", "d_t", "eta_t")
ret <- pomp::simulate(obj, nsim=nsim, as.data.frame=TRUE)
ret$Rnot <- (ret$beta_t)/(params['gamma'] + ret$gamma_t + params['d'] + ret$d_t)
ret[, !colnames(ret) %in% cols_to_delete]
}
ret <- do_sim(sim)
plot(ret$cases, type='l')
seasonal_forcing <- 0 #without seasonal forcing
t_start <- 25*365 #starting at year 25
external_forcing <- 1/365
host_lifetime <- c(70 * 365)
infectious_days <- c(28)
observation_days <- c(200) * 365
population_size <- 10^c(5)
process_reps <- 1
times <- seq(1, observation_days)
params <- c(gamma=1 / infectious_days, mu=1 / host_lifetime,
d=1 / host_lifetime, eta=external_forcing / population_size,
beta=0, rho=0.1, S_0=1, I_0=0, R_0=0, N_0=population_size)
#calculating increasing beta
beta_final <- (params["gamma"] + params["d"]) / population_size #end at ~.085
beta_0 <- rep(0,times=t_start) #time interval where beta is not changing
beta_inc <- seq(0, beta_final, length=(observation_days) - t_start) # hinge function describing increasing beta
period <- 365 #period of seasonality
simulation_years <- observation_days / period #100 years
l <- length(beta_inc) / period #number of years
sin_force <- sin(2 * pi * rep(seq(1,period), times=l) / period)
beta_sin <- beta_inc + seasonal_forcing * sin_force
beta_sin[beta_sin<0] <- 0 #can't have negative transmission values
beta_amp <- c(beta_0, beta_sin)
plot(beta_amp, type='l')
cov <- data.frame(gamma_t=rep(0, times=length(times)), mu_t=rep(0, times=length(times)),
d_t=rep(0, times=length(times)), eta_t=rep(0, times=length(times)),
beta_t=beta_amp, time=times)
sim <- spaero::create_simulator(times=times, params=params, covar=cov)
ret <- list()
do_sim <- function(obj, nsim=process_reps){
cols_to_delete <- c("reports", "gamma_t", "mu_t", "d_t", "eta_t")
ret <- pomp::simulate(obj, nsim=nsim, as.data.frame=TRUE)
ret$Rnot <- (ret$beta_t)/(params['gamma'] + ret$gamma_t + params['d'] + ret$d_t)
ret[, !colnames(ret) %in% cols_to_delete]
}
ret <- do_sim(sim)
plot(ret$cases, type='l')
seasonal_forcing <- 0 #without seasonal forcing
t_start <- 25*365 #starting at year 25
external_forcing <- 1/365
host_lifetime <- c(70 * 365)
infectious_days <- c(28)
observation_days <- c(200) * 365
population_size <- 10^c(5)
process_reps <- 1
times <- seq(1, observation_days)
params <- c(gamma=1 / infectious_days, mu=1 / host_lifetime,
d=1 / host_lifetime, eta=external_forcing / population_size,
beta=24e-8, rho=0.1, S_0=1, I_0=0, R_0=0, N_0=population_size)
#calculating increasing beta
beta_final <- (params["gamma"] + params["d"]) / population_size #end at ~.085
beta_0 <- rep(0,times=t_start) #time interval where beta is not changing
beta_inc <- seq(0, beta_final, length=(observation_days) - t_start) # hinge function describing increasing beta
period <- 365 #period of seasonality
simulation_years <- observation_days / period #100 years
l <- length(beta_inc) / period #number of years
sin_force <- sin(2 * pi * rep(seq(1,period), times=l) / period)
beta_sin <- beta_inc + seasonal_forcing * sin_force
beta_sin[beta_sin<0] <- 0 #can't have negative transmission values
beta_amp <- c(beta_0, beta_sin)
plot(beta_amp, type='l')
cov <- data.frame(gamma_t=rep(0, times=length(times)), mu_t=rep(0, times=length(times)),
d_t=rep(0, times=length(times)), eta_t=rep(0, times=length(times)),
beta_t=beta_amp, time=times)
sim <- spaero::create_simulator(times=times, params=params, covar=cov)
ret <- list()
do_sim <- function(obj, nsim=process_reps){
cols_to_delete <- c("reports", "gamma_t", "mu_t", "d_t", "eta_t")
ret <- pomp::simulate(obj, nsim=nsim, as.data.frame=TRUE)
ret$Rnot <- (ret$beta_t)/(params['gamma'] + ret$gamma_t + params['d'] + ret$d_t)
ret[, !colnames(ret) %in% cols_to_delete]
}
ret <- do_sim(sim)
plot(ret$cases, type='l')
plot(beta_amp, type='l')
seasonal_forcing <- 0 #without seasonal forcing
t_start <- 25*365 #starting at year 25
external_forcing <- 1/365
host_lifetime <- c(70 * 365)
infectious_days <- c(28)
observation_days <- c(100) * 365
population_size <- 10^c(5)
process_reps <- 1
times <- seq(1, observation_days)
params <- c(gamma=1 / infectious_days, mu=1 / host_lifetime,
d=1 / host_lifetime, eta=external_forcing / population_size,
beta=24e-8, rho=0.1, S_0=1, I_0=0, R_0=0, N_0=population_size)
#calculating increasing beta
beta_final <- (params["gamma"] + params["d"]) / population_size #end at ~.085
beta_0 <- rep(0,times=t_start) #time interval where beta is not changing
beta_inc <- seq(0, beta_final, length=(observation_days) - t_start) # hinge function describing increasing beta
period <- 365 #period of seasonality
simulation_years <- observation_days / period #100 years
l <- length(beta_inc) / period #number of years
sin_force <- sin(2 * pi * rep(seq(1,period), times=l) / period)
beta_sin <- beta_inc + seasonal_forcing * sin_force
beta_sin[beta_sin<0] <- 0 #can't have negative transmission values
beta_amp <- c(beta_0, beta_sin)
plot(beta_amp, type='l')
cov <- data.frame(gamma_t=rep(0, times=length(times)), mu_t=rep(0, times=length(times)),
d_t=rep(0, times=length(times)), eta_t=rep(0, times=length(times)),
beta_t=beta_amp, time=times)
sim <- spaero::create_simulator(times=times, params=params, covar=cov)
ret <- list()
do_sim <- function(obj, nsim=process_reps){
cols_to_delete <- c("reports", "gamma_t", "mu_t", "d_t", "eta_t")
ret <- pomp::simulate(obj, nsim=nsim, as.data.frame=TRUE)
ret$Rnot <- (ret$beta_t)/(params['gamma'] + ret$gamma_t + params['d'] + ret$d_t)
ret[, !colnames(ret) %in% cols_to_delete]
}
ret <- do_sim(sim)
plot(ret$cases, type='l')
seasonal_forcing <- 0.001 #without seasonal forcing
t_start <- 25*365 #starting at year 25
external_forcing <- 1/365
host_lifetime <- c(70 * 365)
infectious_days <- c(28)
observation_days <- c(100) * 365
population_size <- 10^c(5)
process_reps <- 1
times <- seq(1, observation_days)
params <- c(gamma=1 / infectious_days, mu=1 / host_lifetime,
d=1 / host_lifetime, eta=external_forcing / population_size,
beta=24e-8, rho=0.1, S_0=1, I_0=0, R_0=0, N_0=population_size)
#calculating increasing beta
beta_final <- (params["gamma"] + params["d"]) / population_size #end at ~.085
beta_0 <- rep(0,times=t_start) #time interval where beta is not changing
beta_inc <- seq(0, beta_final, length=(observation_days) - t_start) # hinge function describing increasing beta
period <- 365 #period of seasonality
simulation_years <- observation_days / period #100 years
l <- length(beta_inc) / period #number of years
sin_force <- sin(2 * pi * rep(seq(1,period), times=l) / period)
beta_sin <- beta_inc + seasonal_forcing * sin_force
beta_sin[beta_sin<0] <- 0 #can't have negative transmission values
beta_amp <- c(beta_0, beta_sin)
plot(beta_amp, type='l')
seasonal_forcing <- 0.0001 #without seasonal forcing
#calculating increasing beta
beta_final <- (params["gamma"] + params["d"]) / population_size #end at ~.085
beta_0 <- rep(0,times=t_start) #time interval where beta is not changing
beta_inc <- seq(0, beta_final, length=(observation_days) - t_start) # hinge function describing increasing beta
period <- 365 #period of seasonality
simulation_years <- observation_days / period #100 years
l <- length(beta_inc) / period #number of years
sin_force <- sin(2 * pi * rep(seq(1,period), times=l) / period)
beta_sin <- beta_inc + seasonal_forcing * sin_force
beta_sin[beta_sin<0] <- 0 #can't have negative transmission values
beta_amp <- c(beta_0, beta_sin)
plot(beta_amp, type='l')
seasonal_forcing <- 0.00001 #without seasonal forcing
t_start <- 25*365 #starting at year 25
external_forcing <- 1/365
host_lifetime <- c(70 * 365)
infectious_days <- c(28)
observation_days <- c(100) * 365
population_size <- 10^c(5)
process_reps <- 1
times <- seq(1, observation_days)
params <- c(gamma=1 / infectious_days, mu=1 / host_lifetime,
d=1 / host_lifetime, eta=external_forcing / population_size,
beta=24e-8, rho=0.1, S_0=1, I_0=0, R_0=0, N_0=population_size)
#calculating increasing beta
beta_final <- (params["gamma"] + params["d"]) / population_size #end at ~.085
beta_0 <- rep(0,times=t_start) #time interval where beta is not changing
beta_inc <- seq(0, beta_final, length=(observation_days) - t_start) # hinge function describing increasing beta
period <- 365 #period of seasonality
simulation_years <- observation_days / period #100 years
l <- length(beta_inc) / period #number of years
sin_force <- sin(2 * pi * rep(seq(1,period), times=l) / period)
beta_sin <- beta_inc + seasonal_forcing * sin_force
beta_sin[beta_sin<0] <- 0 #can't have negative transmission values
beta_amp <- c(beta_0, beta_sin)
plot(beta_amp, type='l')
seasonal_forcing <- 0.000001 #without seasonal forcing
times <- seq(1, observation_days)
params <- c(gamma=1 / infectious_days, mu=1 / host_lifetime,
d=1 / host_lifetime, eta=external_forcing / population_size,
beta=24e-8, rho=0.1, S_0=1, I_0=0, R_0=0, N_0=population_size)
#calculating increasing beta
beta_final <- (params["gamma"] + params["d"]) / population_size #end at ~.085
beta_0 <- rep(0,times=t_start) #time interval where beta is not changing
beta_inc <- seq(0, beta_final, length=(observation_days) - t_start) # hinge function describing increasing beta
period <- 365 #period of seasonality
simulation_years <- observation_days / period #100 years
l <- length(beta_inc) / period #number of years
sin_force <- sin(2 * pi * rep(seq(1,period), times=l) / period)
beta_sin <- beta_inc + seasonal_forcing * sin_force
beta_sin[beta_sin<0] <- 0 #can't have negative transmission values
beta_amp <- c(beta_0, beta_sin)
plot(beta_amp, type='l')
seasonal_forcing <- 0.0000001 #without seasonal forcing
t_start <- 25*365 #starting at year 25
external_forcing <- 1/365
host_lifetime <- c(70 * 365)
infectious_days <- c(28)
observation_days <- c(100) * 365
population_size <- 10^c(5)
process_reps <- 1
times <- seq(1, observation_days)
params <- c(gamma=1 / infectious_days, mu=1 / host_lifetime,
d=1 / host_lifetime, eta=external_forcing / population_size,
beta=24e-8, rho=0.1, S_0=1, I_0=0, R_0=0, N_0=population_size)
#calculating increasing beta
beta_final <- (params["gamma"] + params["d"]) / population_size #end at ~.085
beta_0 <- rep(0,times=t_start) #time interval where beta is not changing
beta_inc <- seq(0, beta_final, length=(observation_days) - t_start) # hinge function describing increasing beta
period <- 365 #period of seasonality
simulation_years <- observation_days / period #100 years
l <- length(beta_inc) / period #number of years
sin_force <- sin(2 * pi * rep(seq(1,period), times=l) / period)
beta_sin <- beta_inc + seasonal_forcing * sin_force
beta_sin[beta_sin<0] <- 0 #can't have negative transmission values
beta_amp <- c(beta_0, beta_sin)
plot(beta_amp, type='l')
seasonal_forcing <- 0.00000001 #without seasonal forcing
t_start <- 25*365 #starting at year 25
external_forcing <- 1/365
host_lifetime <- c(70 * 365)
infectious_days <- c(28)
observation_days <- c(100) * 365
population_size <- 10^c(5)
process_reps <- 1
times <- seq(1, observation_days)
params <- c(gamma=1 / infectious_days, mu=1 / host_lifetime,
d=1 / host_lifetime, eta=external_forcing / population_size,
beta=24e-8, rho=0.1, S_0=1, I_0=0, R_0=0, N_0=population_size)
#calculating increasing beta
beta_final <- (params["gamma"] + params["d"]) / population_size #end at ~.085
beta_0 <- rep(0,times=t_start) #time interval where beta is not changing
beta_inc <- seq(0, beta_final, length=(observation_days) - t_start) # hinge function describing increasing beta
period <- 365 #period of seasonality
simulation_years <- observation_days / period #100 years
l <- length(beta_inc) / period #number of years
sin_force <- sin(2 * pi * rep(seq(1,period), times=l) / period)
beta_sin <- beta_inc + seasonal_forcing * sin_force
beta_sin[beta_sin<0] <- 0 #can't have negative transmission values
beta_amp <- c(beta_0, beta_sin)
plot(beta_amp, type='l')
cov <- data.frame(gamma_t=rep(0, times=length(times)), mu_t=rep(0, times=length(times)),
d_t=rep(0, times=length(times)), eta_t=rep(0, times=length(times)),
beta_t=beta_amp, time=times)
sim <- spaero::create_simulator(times=times, params=params, covar=cov)
ret <- list()
do_sim <- function(obj, nsim=process_reps){
cols_to_delete <- c("reports", "gamma_t", "mu_t", "d_t", "eta_t")
ret <- pomp::simulate(obj, nsim=nsim, as.data.frame=TRUE)
ret$Rnot <- (ret$beta_t)/(params['gamma'] + ret$gamma_t + params['d'] + ret$d_t)
ret[, !colnames(ret) %in% cols_to_delete]
}
ret <- do_sim(sim)
plot(ret$cases, type='l')
plot(ret$Rnot)
str(ret)
ret <- list()
do_sim <- function(obj, nsim=process_reps){
cols_to_delete <- c("reports", "gamma_t", "mu_t", "d_t", "eta_t")
ret <- pomp::simulate(obj, nsim=nsim, as.data.frame=TRUE)
ret$Rnot <- (ret$N * ret$beta_t)/(params['gamma'] + ret$gamma_t + params['d'] + ret$d_t)
ret[, !colnames(ret) %in% cols_to_delete]
}
ret <- do_sim(sim)
plot(ret$cases, type='l')
plot(ret$Rnot)
plot(ret$Rnot, type='l')
levs <- list()
levs$seasonal_forcing <- 1e-8 #.001 #seq(0,.02, length.out=30) #seq(0, 24e-7, length.out=30)
levs$t_start <- seq(25*365, 75*365, length.out=30)
levs$external_forcing <- 2/365
levs$host_lifetime <- c(70 * 365)
levs$infectious_days <- c(28)
levs$observation_days <- c(100) * 365
levs$population_size <- 1e5
levs$process_reps <- 1
process_des_mat <- do.call(expand.grid, levs)
str(process_des_mat)
seasonal_forcing <- 0.00000001 #without seasonal forcing
t_start <- 25*365 #starting at year 25
external_forcing <- 1/365
host_lifetime <- c(70 * 365)
infectious_days <- c(28)
observation_days <- c(100) * 365
population_size <- 10^c(5)
process_reps <- 1
times <- seq(1, observation_days)
params <- c(gamma=1 / infectious_days, mu=1 / host_lifetime,
d=1 / host_lifetime, eta=external_forcing / population_size,
beta=24e-8, rho=0.1, S_0=1, I_0=0, R_0=0, N_0=population_size)
#calculating seasonal beta
beta_final <- (params["gamma"] + params["d"]) #/ population_size #end at ~.085
beta_0 <- rep(0,times=t_start) #time interval where beta is not changing
beta_inc <- seq(0, beta_final, length=(observation_days) - t_start) # hinge function describing increasing beta
period <- 365 #period of seasonality
simulation_years <- observation_days / period #100 years
l <- length(beta_inc) / period #number of years
sin_force <- sin(2 * pi * rep(seq(1,period), times=l) / period)
beta_sin <- beta_inc + seasonal_forcing * sin_force
beta_sin[beta_sin<0] <- 0 #can't have negative transmission values
beta_amp <- c(beta_0, beta_sin)
#plot(beta_amp, type='l')
cov <- data.frame(gamma_t=rep(0, times=length(times)), mu_t=rep(0, times=length(times)),
d_t=rep(0, times=length(times)), eta_t=rep(0, times=length(times)),
beta_t=beta_amp, time=times)
sim <- spaero::create_simulator(times=times, params=params, covar=cov)
ret <- list()
do_sim <- function(obj, nsim=process_reps){
cols_to_delete <- c("reports", "gamma_t", "mu_t", "d_t", "eta_t")
ret <- pomp::simulate(obj, nsim=nsim, as.data.frame=TRUE)
ret$Rnot <- (ret$N * ret$beta_t)/(params['gamma'] + ret$gamma_t + params['d'] + ret$d_t)
ret[, !colnames(ret) %in% cols_to_delete]
}
ret <- do_sim(sim)
str(ret)
plot(ret$cases)
plot(ret$cases, type='l')
plot(log(ret$cases), type='l')
seasonal_forcing <- 0.00000001 #without seasonal forcing
t_start <- 25*365 #starting at year 25
external_forcing <- 1/365
host_lifetime <- c(70 * 365)
infectious_days <- c(28)
observation_days <- c(100) * 365
population_size <- 10^c(5)
process_reps <- 1
times <- seq(1, observation_days)
params <- c(gamma=1 / infectious_days, mu=1 / host_lifetime,
d=1 / host_lifetime, eta=external_forcing / population_size,
beta=24e-8, rho=0.1, S_0=1, I_0=0, R_0=0, N_0=population_size)
#calculating increasing beta
beta_final <- (params["gamma"] + params["d"]) / population_size #end at ~.085
beta_0 <- rep(0,times=t_start) #time interval where beta is not changing
beta_inc <- seq(0, beta_final, length=(observation_days) - t_start) # hinge function describing increasing beta
period <- 365 #period of seasonality
simulation_years <- observation_days / period #100 years
l <- length(beta_inc) / period #number of years
sin_force <- sin(2 * pi * rep(seq(1,period), times=l) / period)
beta_sin <- beta_inc + seasonal_forcing * sin_force
beta_sin[beta_sin<0] <- 0 #can't have negative transmission values
beta_amp <- c(beta_0, beta_sin)
plot(beta_amp, type='l')
cov <- data.frame(gamma_t=rep(0, times=length(times)), mu_t=rep(0, times=length(times)),
d_t=rep(0, times=length(times)), eta_t=rep(0, times=length(times)),
beta_t=beta_amp, time=times)
sim <- spaero::create_simulator(times=times, params=params, covar=cov)
ret <- list()
do_sim <- function(obj, nsim=process_reps){
cols_to_delete <- c("reports", "gamma_t", "mu_t", "d_t", "eta_t")
ret <- pomp::simulate(obj, nsim=nsim, as.data.frame=TRUE)
ret$Rnot <- (ret$N * ret$beta_t)/(params['gamma'] + ret$gamma_t + params['d'] + ret$d_t)
ret[, !colnames(ret) %in% cols_to_delete]
}
ret <- do_sim(sim)
plot(ret$cases, type='l')
plot(ret$Rnot, type='l')
```{r Parameter values for model simulations, echo=FALSE, eval=F}
gitwd()
getwd()
setwd("~/Documents/culex-SDM/project-docs")
load("thinningData.RData")
load("SimulatedSpeciesTestingDAUC.Rdata")
